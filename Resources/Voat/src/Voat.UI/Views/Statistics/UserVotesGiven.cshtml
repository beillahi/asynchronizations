@*
    
    Copyright(c) Voat, Inc.

    This file is part of Voat.

    This source file is subject to version 3 of the GPL license,
    that is bundled with this package in the file LICENSE, and is
    available online at http://www.gnu.org/licenses/gpl-3.0.txt;
    you may not use this file except in compliance with the License.

    Software distributed under the License is distributed on an
    "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express
    or implied. See the License for the specific language governing
    rights and limitations under the License.

    All Rights Reserved.

*@



@model Voat.Domain.Models.Statistics<IEnumerable<Voat.Domain.Models.UserVoteStats>>

@{
    Dictionary<string, IEnumerable<Voat.Domain.Models.UserVoteStats>> segmented = new Dictionary<string, IEnumerable<Voat.Domain.Models.UserVoteStats>>();

    segmented.Add("Most Submissions Upvoted", Model.Data.Where(x => x.ContentType == Voat.Domain.Models.ContentType.Submission && x.VoteType == Voat.Domain.Models.VoteValue.Up));
    segmented.Add("Most Submissions Downvoted", Model.Data.Where(x => x.ContentType == Voat.Domain.Models.ContentType.Submission && x.VoteType == Voat.Domain.Models.VoteValue.Down));

    segmented.Add("Most Comments Upvoted", Model.Data.Where(x => x.ContentType == Voat.Domain.Models.ContentType.Comment && x.VoteType == Voat.Domain.Models.VoteValue.Up));
    segmented.Add("Most Comments Downvoted", Model.Data.Where(x => x.ContentType == Voat.Domain.Models.ContentType.Comment && x.VoteType == Voat.Domain.Models.VoteValue.Down));

}
<div id="container">
    <div id="about-main" class="content about-page" role="main">

        <h1 class="alert-h1">User Votes Given Statistics</h1>
        <p class="tagline">
            <span>
                <time title="@Model.BeginDate" datetime="@Model.BeginDate">@Model.BeginDate.ToShortDateString()</time> through <time title="@Model.EndDate" datetime="@Model.EndDate">@Model.EndDate.ToShortDateString()</time> generated <time title="@Model.CreationDate" datetime="@Model.CreationDate">@Age.ToRelative(Model.CreationDate)</time> ago.
            </span>
        </p>
        @foreach (var key in segmented.Keys)
        {
            if (segmented[key].Any())
            {
                var records = segmented[key];
                <section>
                    <h2>@key</h2>
                    <table class="table table-striped table-condensed">
                        <thead>
                            <tr>
                                <th style="width:50%">User</th>
                                <th>Total Count</th>
                            </tr>
                        </thead>
                        <tbody>

                            @foreach (var record in records)
                            {
                                <tr>
                                    <td>
                                        <a class="author may-blank userinfo" href="/user/@record.UserName" data-username="@record.UserName">@record.UserName</a>
                                    </td>
                                    <td>@record.TotalCount</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </section>
            }
        }
    </div>
</div>

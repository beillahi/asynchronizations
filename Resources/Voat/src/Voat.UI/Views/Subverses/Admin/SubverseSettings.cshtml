@*
    
    Copyright(c) Voat, Inc.

    This file is part of Voat.

    This source file is subject to version 3 of the GPL license,
    that is bundled with this package in the file LICENSE, and is
    available online at http://www.gnu.org/licenses/gpl-3.0.txt;
    you may not use this file except in compliance with the License.

    Software distributed under the License is distributed on an
    "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express
    or implied. See the License for the specific language governing
    rights and limitations under the License.

    All Rights Reserved.

*@

@model Voat.Models.ViewModels.SubverseSettingsViewModel

@{
    ViewBag.Title = "Subverse settings";
}

<div id="container">
    <div id="about-main" class="content about-page" role="main">

        <h1>Subverse settings interface for: <a href="/v/@ViewBag.SubverseName">@ViewBag.SubverseName</a></h1>

        <h2>Subverse settings</h2>

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.Name)
                @Html.HiddenFor(model => model.LastUpdateDate)

                <div class="form-group">
                    @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextBoxFor(model => model.Title, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextBoxFor(model => model.Description, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(x => x.SideBar, "Sidebar text, accepts Markdown formatting", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.MarkdownEditorFor(model => model.SideBar, new { @class = "form-control", rows = "5" })
                        @Html.ValidationMessageFor(model => model.SideBar, "", new { @class = "text-danger" })
                        <input type="button" id="previewButton" value="Preview" class="btn-whoaverse" onclick="showMessagePreview(this,$('#SideBar'),$('#submission-preview-area'))"> 
                        <div class="panel panel-default" id="submission-preview-area" style="display: none">
							<div class="panel-heading">
								<h4 class="panel-title">Preview</h4>
							</div>
							<div class="panel-body">
								<div class="usertext-body may-blank-within">
									<div class="md" id="submission-preview-area-container">
										Loading preview...
									</div>
								</div>
							</div>
						</div>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(x => x.IsAdult, "Rated adult", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.IsAdult, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.IsAdult, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(x => x.IsThumbnailEnabled, "Thumbnails enabled", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.IsThumbnailEnabled, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.IsThumbnailEnabled, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(x => x.IsAuthorizedOnly, "Only allow submissions from authorized submitters", htmlAttributes: new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.IsAuthorizedOnly, new {@class = "form-control"})
                        @Html.ValidationMessageFor(model => model.IsAuthorizedOnly, "", new {@class = "text-danger"})
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(x => x.ExcludeSitewideBans, "Exclude sitewide bans", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ExcludeSitewideBans, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.ExcludeSitewideBans, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group" style='@(ModeratorPermission.IsLevel(User, Model.Name, Voat.Domain.Models.ModeratorLevel.Owner) ? "" : "display:none")'>
                    @Html.LabelFor(x => x.IsAnonymized, "Anonymized mode", htmlAttributes: new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.IsAnonymized, new {@class = "form-control"})
                        @Html.ValidationMessageFor(model => model.IsAnonymized, "", new {@class = "text-danger"})
                        <p>
                            Explaination of setting:
                        </p>

                        <ul>
                            <li>Yes - Turns on Anonymized mode</li>
                            <li>No - Turns off Anonymized mode</li>
                            <li>Both - Mixed content - users can decide to submit their content as anonymized</li>
                        </ul>
                        
                        <p>
                            Changing this setting will not modify existing content. Only Owners can change this setting.
                        </p>
                    </div>
                </div>
                <div class="alert-title">Time Delayed Settings</div>
                <div class="form-group">
                    <div class="control-label col-md-2"></div>
                    <div class="col-md-9">
                        @{
                            var hoursLeft = (Model.LastUpdateDate == null ? 0 : VoatSettings.Instance.SubverseUpdateTimeLockInHours - DateTime.UtcNow.Subtract(Model.LastUpdateDate.Value).TotalHours);
                            if (hoursLeft > 0)
                            {
                                <p class="validation-summary-errors">These settings are locked from changes for an additional @Math.Round(hoursLeft, 0) hour(s).</p>
                            }
                            else
                            {
                                <p>You can change these settings.</p>
                            }
                        }
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(x => x.IsPrivate, "Set private", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.IsPrivate, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.IsPrivate, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="control-label col-md-2"></div>
                    <div class="col-md-9">
                        WARNING: If subverse is private, this subverse will be hidden from /v/all and votes will not increase user SCP/CCP.
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(x => x.MinCCPForDownvote, "Minimum CCP required for downvoting", htmlAttributes: new {@class = "control-label col-md-2"})
                    <div class="col-md-1">
                        @Html.TextBoxFor(model => model.MinCCPForDownvote, new {@class = "form-control"})
                    </div>
                    @Html.ValidationMessageFor(model => model.MinCCPForDownvote, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    <div class="control-label col-md-2"></div>
                    <div class="col-md-9">
                        WARNING: If minimum CCP is higher than 0, this subverse will be hidden from /v/all and votes will not increase user SCP/CCP.
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Save" class="btn-whoaverse btn-default" />
                    </div>
                </div>
            </div>
        }

    </div>
</div>

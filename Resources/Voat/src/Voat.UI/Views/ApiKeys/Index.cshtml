@*
    
    Copyright(c) Voat, Inc.

    This file is part of Voat.

    This source file is subject to version 3 of the GPL license,
    that is bundled with this package in the file LICENSE, and is
    available online at http://www.gnu.org/licenses/gpl-3.0.txt;
    you may not use this file except in compliance with the License.

    Software distributed under the License is distributed on an
    "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express
    or implied. See the License for the specific language governing
    rights and limitations under the License.

    All Rights Reserved.

*@

@model IEnumerable<Tuple<Voat.Data.Models.ApiClient, Voat.Data.Models.ApiThrottlePolicy, Voat.Domain.Models.ApiPermissionSet >>

@{
    ViewBag.Title = "Voat Api Keys";

}
<style type="text/css">
    table td > p {
        padding: 5px;
    }

    .breakword {
        white-space: -moz-pre-wrap; /* Mozilla */
        white-space: -hp-pre-wrap; /* HP printers */
        white-space: -o-pre-wrap; /* Opera 7 */
        white-space: -pre-wrap; /* Opera 4-6 */
        xwhite-space: pre-wrap; /* CSS 2.1 */
        xwhite-space: pre-line; /* CSS 3 (and 2.1 as well, actually) */
        word-wrap: break-word; /* IE */
        word-break: break-all;
    }

    .indent {
        padding-left: 5px;
    }
</style>

<div id="container" class="md">
    <h1>Your Api Keys</h1>
    <p>If you need different permissions or throttle policies please contact voat by email at hello@voat.co.</p>
    @if (VoatSettings.Instance.ApiKeyCreationEnabled)
    {
        <p>
            @Html.ActionLink("Create New", "Create")
        </p>
    }

    @if (Model.Count() <= 0)
    {
        <p>You have no api keys</p>
    }
    else {


        <table class="table">
            <tr>
                <th width="30%">
                    Details
                </th>
                <th width="65%">
                    Keys
                </th>
            </tr>

            @foreach (var tuple in Model)
            {
                var item = tuple.Item1;
                var policy = tuple.Item2;
                var perms = tuple.Item3;
                <tr>
                    <td>

                        <h3>@Html.DisplayFor(modelItem => item.AppName)</h3>
                        
                       
                        <p>
                            @Html.DisplayFor(modelItem => item.AppDescription)
                        </p>

                        @if (!String.IsNullOrEmpty(item.AppAboutUrl))
                        {
                            <p class="breakword"><a href="@item.AppAboutUrl" target="_blank">@item.AppAboutUrl</a></p>
                        }

                        @* Basically, we don't want a user to delete if a key has been turned off by an admin. *@
                        @if (item.IsActive)
                        {
                            @Html.ActionLink("Edit", "Edit", new { id = item.PublicKey }, new { @class = "btn-whoaverse" })
                        }

                        <p>
                            Status - 
                            @if (item.IsActive)
                            {
                                <span style="">Active</span>
                            }
                            else
                            {
                                <span style="color:red;">Inactive</span>
                            }
                            <br/>
                            Created - @Html.DisplayFor(modelItem => item.CreationDate)<br/>
                            Last Used -
                            @if (item.LastAccessDate.HasValue)
                            {
                                @Html.DisplayFor(modelItem => item.LastAccessDate)
                            }
                            else {
                                @Html.Raw("Never");
                            }
                        </p>
                        @if (policy != null)
                        {
                            <div class="breakword indent">
                                <strong>Throttle Policy</strong>
                                <h3>@policy.Name</h3>

                                @{
                                    var result = Newtonsoft.Json.JsonConvert.DeserializeObject<Voat.Domain.Models.RateLimits>(policy.Policy);
                                    if (result != null)
                                    {
                                        <span>Per Second: </span><i>@result.PerSecond</i><br/>
                                        <span>Per Minute: </span><i>@result.PerMinute</i><br />
                                        <span>Per Hour: </span><i>@result.PerHour</i><br />
                                        <span>Per Day: </span><i>@result.PerDay</i><br />
                                        <span>Per Week: </span><i>@result.PerWeek</i><br />
                                    }
                                    else
                                    {
                                        <i>@policy.Policy</i>
                                    }

                                }

                            </div>
                        }
                        @if (perms != null)
                        {
                            <div class="breakword indent">
                                <strong>Permission Policy</strong>
                                <h3>@perms.Name</h3>
                                @{
                                    <span>Unrestricted Login: </span><i>@perms.AllowUnrestrictedLogin</i><br />
                                    <span>Owner Login: </span><i>@perms.AllowLogin</i><br />
                                    <span>Allow Stream: </span><i>@perms.AllowStream</i><br />
                                    <span>Require HMAC: </span><i>@perms.RequireHmacOnLogin</i><br />
                                }

                            </div>
                        }
                       

                    </td>
                    <td>
                        <div>
                            <h3>Public Key:</h3>
                            <p class="breakword indent">
                                @Html.DisplayFor(modelItem => item.PublicKey)
                            </p>
                            <h3>Private Key / Secret:</h3>
                            <p class="breakword indent">
                                @Html.DisplayFor(modelItem => item.PrivateKey)<br />
                            </p>
                            @if (!String.IsNullOrEmpty(item.RedirectUrl))
                            {
                                <h3>Redirect Url:</h3>
                                <p class="breakword indent">
                                    @Html.DisplayFor(modelItem => item.RedirectUrl)<br />
                                </p>
                            }

                            @* Basically, we don't want a user to delete if a key has been turned off by an admin. *@
                            @if (item.IsActive)
                            {
                                using (Html.BeginForm("Delete", "ApiKeys", new { id = item.ID }, FormMethod.Post))
                                {
                                    <input type="submit" value="Delete" class="btn-whoaverse" />
                                }
                            }

                        </div>
                    </td>
                   
                </tr>
            }

        </table>

    }
</div>

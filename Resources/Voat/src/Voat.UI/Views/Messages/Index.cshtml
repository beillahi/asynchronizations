@*
    
    Copyright(c) Voat, Inc.

    This file is part of Voat.

    This source file is subject to version 3 of the GPL license,
    that is bundled with this package in the file LICENSE, and is
    available online at http://www.gnu.org/licenses/gpl-3.0.txt;
    you may not use this file except in compliance with the License.

    Software distributed under the License is distributed on an
    "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express
    or implied. See the License for the specific language governing
    rights and limitations under the License.

    All Rights Reserved.

*@

@model PaginatedList<Voat.Domain.Models.Message>

@{

    ViewBag.Title = String.IsNullOrEmpty(ViewBag.Title) ? "Inbox" : ViewBag.Title;
    var qcounts = new Voat.Domain.Query.QueryMessageCounts(User, Voat.Domain.Models.MessageTypeFlag.All, Voat.Domain.Models.MessageState.Unread);
    var counts = qcounts.Execute();
    var context = (Voat.Models.ViewModels.MessageContextViewModel)ViewBag.Context;
    //counts
    var unreadPrivateCount = counts.GetCount(Voat.Domain.Models.MessageType.Private);
    var unreadCommentReplyCount = counts.GetCount(Voat.Domain.Models.MessageType.CommentReply);
    var unreadCommentMentionCount = counts.GetCount(Voat.Domain.Models.MessageType.CommentMention);
    var unreadSubmissionReplyCount = counts.GetCount(Voat.Domain.Models.MessageType.SubmissionReply);
    var unreadSubmissionMentionCount = counts.GetCount(Voat.Domain.Models.MessageType.SubmissionMention);
    var formatString = " ({0} new)";
    var subContext = (context.ViewerContext.Type == Voat.Domain.Models.IdentityType.Subverse ? context.ViewerContext.Name : "");

    Voat.Models.ViewModels.NavigationViewModel navModel = ViewBag.NavigationViewModel;
}

<style>
    .p {
        font-size: 35px;
    }
</style>

@Html.AntiForgeryToken()

<div id="container">

    <h1>@ViewBag.Title</h1>
    @if (navModel.MenuType == Voat.Models.ViewModels.MenuType.UserMessages)
    {
        <a href="/messages/private" class="btn-whoaverse-paging">Inbox @(unreadPrivateCount > 0 ? String.Format(formatString, unreadPrivateCount) : "")</a>
        <a href="/messages/replies/comment" class="btn-whoaverse-paging">Comment Replies@(unreadCommentReplyCount > 0 ? String.Format(formatString, unreadCommentReplyCount) : "")</a>
        <a href="/messages/replies/submission" class="btn-whoaverse-paging">Submission Replies@(unreadSubmissionReplyCount > 0 ? String.Format(formatString, unreadSubmissionReplyCount) : "")</a>
        <a href="/messages/mentions/comment" class="btn-whoaverse-paging">Comment Mentions@(unreadCommentMentionCount > 0 ? String.Format(formatString, unreadCommentMentionCount) : "")</a>
        <a href="/messages/mentions/submission" class="btn-whoaverse-paging">Submission Mentions@(unreadSubmissionMentionCount > 0 ? String.Format(formatString, unreadSubmissionMentionCount) : "")</a>
    }

    <div id="about-main" class="" role="main">
        <div class="md">
            @if (Model.Count > 0)
            {
                <p>Displaying @Model.Count message(s).</p>

                if (Model.Any(x => x.ReadDate == null && x.Type == Voat.Domain.Models.MessageType.Private))
                {
                    <p align="right">
                        <a id="markAllPrivateMessageAsRead" href="javascript:void(0)" onclick="return markAsRead(this, 'private', 'read', null, '@subContext')" class="btn-whoaverse-paging">Mark all as read</a>
                    </p>
                }
                <hr />
                <div id="messageContainer">
                    @foreach (var message in Model)
                    {
                        //var readStatusClass = message.IsRead ? null : "unreadInboxItem";
                        var unreadCssClass = message.IsRead ? "" : " unread";

                        var sender = (message.SenderType == Voat.Domain.Models.IdentityType.User ? "" : "v/") + message.Sender;
                        var senderHref = (message.SenderType == Voat.Domain.Models.IdentityType.User ? "/u/" : "/v/") + message.Sender;

                        var recipient = (message.RecipientType == Voat.Domain.Models.IdentityType.User ? "" : "v/") + message.Recipient;
                        var recipientHref = (message.RecipientType == Voat.Domain.Models.IdentityType.User ? "/u/" : "/v/") + message.Recipient;

                        if (message.IsAnonymized)
                        {
                            sender = "Anon";
                            senderHref = "#";

                            recipient = "Anon";
                            recipientHref = "#";
                        }

                        switch (message.Type)
                        {
                            case Voat.Domain.Models.MessageType.Private:
                            case Voat.Domain.Models.MessageType.Sent:


                                var sendingUser = "";
                                var showDelete = context.ViewerContext.Type == Voat.Domain.Models.IdentityType.User;

                                if (message.Type == Voat.Domain.Models.MessageType.Private && message.SenderType == Voat.Domain.Models.IdentityType.Subverse)
                                {
                                    sendingUser = message.CreatedBy;
                                }
                                else if (message.Type == Voat.Domain.Models.MessageType.Sent && message.SenderType == Voat.Domain.Models.IdentityType.Subverse)
                                {
                                    sendingUser = message.CreatedBy;
                                }

                                <div id="messageContainer-@message.ID" class="entry">
                                    <div class="panel panel-default @(unreadCssClass)">
                                        <div class="panel panel-heading">
                                            <a href="@senderHref">@sender</a>
                                            @if (!String.IsNullOrEmpty(sendingUser))
                                            {
                                                <span>(</span><a href="/u/@sendingUser">@sendingUser</a><span>)</span>
                                            }
                                            &gt;
                                            <a href="@recipientHref">@recipient</a> | Sent: @Age.ToRelative(message.CreationDate) ago on @message.CreationDate
                                        </div>
                                        <div class="panel panel-heading-messagetitle">
                                            <b>@message.Title</b>
                                        </div>

                                        <div class="panel-message-body">
                                            @Html.Raw(message.FormattedContent)
                                            <textarea id="sourceDisplay" readonly="" class="commenttextarea" style="display: none;">@Html.Raw(message.Content)</textarea>
                                            <ul class="flat-list buttons">

                                                @if (message.Type == Voat.Domain.Models.MessageType.Private)
                                                {
                                                    <li>
                                                        <a id="replyPrivateMessage" href="javascript:void(0)" onclick="return messageReplyForm(@message.ID);">reply</a>
                                                    </li>
                                                }

                                                <li>
                                                    <a id="sourcePrivateMessage" href="javascript:void(0)" onclick="toggleSource(this)">source</a>
                                                </li>

                                                @if (showDelete)
                                                {
                                                    <li>
                                                        <a id="deletePrivateMessage" href="javascript:void(0)" onclick="return deleteMessage(this, '@message.Type', @message.ID, '@subContext')">delete</a>
                                                    </li>
                                                }
                                                @if (!message.IsRead)
                                                {
                                                    // status: true = unread, false = read
                                                    <li>
                                                        <a id="markPrivateMessageAsRead" class="markAsReadLink" href="javascript:void(0)" onclick="return markAsRead(this, '@message.Type', 'read', @message.ID, '@subContext')">mark as read</a>
                                                    </li>
                                                }
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                                break;

                            case Voat.Domain.Models.MessageType.SubmissionMention:

                                var submission = message.Submission;
                                try
                                {
                                    
                                    <div id="messageContainer-@message.ID" class="entry">
                                        <div class="panel panel-default @(unreadCssClass)">
                                            <div class="panel panel-heading">
                                                <b>@submission.Title</b>
                                            </div>
                                            <div class="panel-message-body">
                                                   @Html.Partial("~/Views/Shared/Submissions/_Submission.cshtml", submission, new ViewDataDictionary(ViewData) { { "CssClass", new string[] { "" } } })
                                            </div>
                                        </div>
                                    </div>
                                }
                                catch (Exception ex)
                                {
                                    //catch traps when comment/submission was deleted as is the case with deleted subverses
                                    Voat.Utilities.Components.EventLogger.Instance.Log(ex, new { message = message }, null);
                                }
                                break;
                            case Voat.Domain.Models.MessageType.CommentMention:
                            case Voat.Domain.Models.MessageType.CommentReply:
                            case Voat.Domain.Models.MessageType.SubmissionReply:

                                try
                                {
                                    //var q = new Voat.Domain.Query.QuerySubmission(message.SubmissionID.Value);
                                    //var submission2 = q.Execute();

                                    //var qc = new Voat.Domain.Query.QueryComment(message.CommentID.Value);
                                    var comment = message.Comment;

                                    <div id="messageContainer-@comment.ID" class="entry">
                                        <div class="panel panel-default @(unreadCssClass)">
                                            @if (comment != null)
                                            {
                                                <div class="panel panel-heading">
                                                    <a href="@VoatUrlFormatter.CommentsPagePath(message.Subverse, message.SubmissionID.Value)"><b>@message.Title</b></a>
                                                </div>
                                                <div class="panel-message-body">
                                                    @Html.Partial("~/Views/Shared/Comments/_SubmissionComment.cshtml",
                                                    Voat.Domain.DomainMaps.Map(comment, User, true),
                                                    new ViewDataDictionary(ViewData) {
                                                        { "parentIsHidden", false },
                                                        { "SortOrder", Voat.Domain.Models.CommentSortAlgorithm.New },
                                                        { "ShowContextLink", true } }
                                                    )
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="panel panel-heading">
                                                    <b>Can't Find Data</b>
                                                </div>
                                                <div class="panel-message-body">
                                                    <p>Can't Find Data</p>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                                catch (Exception ex)
                                {
                                    //catch traps when comment/submission was deleted as is the case with deleted subverses
                                    Voat.Utilities.Components.EventLogger.Instance.Log(ex, new { message = message }, null);
                                }


                                break;
                        }
                    }
                </div>
            }
            else
            {
                <p>This box is empty. I may be just a server with limited intelligence, but I am not quite sure how to feel about this.</p>
            }
        </div>
    </div>
    @Html.DisplayFor(model => Model, "IPaginatedList")
</div>

@*
    
    Copyright(c) Voat, Inc.

    This file is part of Voat.

    This source file is subject to version 3 of the GPL license,
    that is bundled with this package in the file LICENSE, and is
    available online at http://www.gnu.org/licenses/gpl-3.0.txt;
    you may not use this file except in compliance with the License.

    Software distributed under the License is distributed on an
    "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express
    or implied. See the License for the specific language governing
    rights and limitations under the License.

    All Rights Reserved.

*@

@model PaginatedList<Voat.Domain.Models.DomainReferenceDetails>

@{

    var sort = Voat.Domain.Models.SortAlgorithm.Hot;
    string description = "Showing subverses ordered by number of subscribers.";
    Voat.Models.ViewModels.NavigationViewModel navModel = ViewBag.NavigationViewModel;

    Voat.Domain.Models.DomainType domainType = ViewBag.DomainType;
   
    if (navModel != null && navModel.Sort.HasValue)
    {
        sort = navModel.Sort.Value;
    }

    switch (sort)
    {
        case Voat.Domain.Models.SortAlgorithm.New:
            ViewBag.Title = String.Format("Newest {0}s", domainType.ToString());
            description = String.Format("Showing the most recently created {0}s", domainType.ToString());
            break;
        case Voat.Domain.Models.SortAlgorithm.Active:
            ViewBag.Title = String.Format("Active {0}s", domainType.ToString());
            description = String.Format("Showing {0}s ordered by posting activity", domainType.ToString());
            break;
        default:
            ViewBag.Title = String.Format("Popular {0}s", domainType.ToString());
            description = String.Format("Showing {0}s ordered by number of subscribers", domainType.ToString());
            break;
    }
}

<style type="text/css">
    body > .content .link .rank {
        width: 3.2ex;
    }
</style>

<div id="container">
    @*<div class="side">
        <div class="spacer">
            <div class="sidebox create">
                <a href="/subverses/create" class="btn-whoaverse btn-block">
                    Create your own subverse
                </a>
            </div>
        </div>
    </div>*@

    <div role="main">

       
        @Html.Partial("_SubMenu", domainType)

        @*<div style="padding:10px;">
            <a href="@Url.RouteUrl("Discover", new { domainType = "subverse", sort = Request.RequestContext.RouteData.Values["sort"] })" class='@(domainType == Voat.Domain.Models.DomainType.Subverse ? "btn-voat" : "btn-voat btn-voat-off")'>Subverses</a>
            <a href="@Url.RouteUrl("Discover", new { domainType = "set", sort = Request.RequestContext.RouteData.Values["sort"] })" class='@(domainType == Voat.Domain.Models.DomainType.Set ? "btn-voat" : "btn-voat btn-voat-off")'>Sets</a>
        </div>*@
        <div class="alert-notice">
            <p>@description</p>
        </div>

        @if (!String.IsNullOrEmpty(Context.Request.Query["phrase"]) || Context.Request.GetUrl().AbsoluteUri.Contains("/search"))
        {
            @Html.Partial("_SearchBar", domainType)

        }

        <div class="sitetable linklisting">

            @if (Model.Any())
            {
                using (var enumerator = Model.GetEnumerator())
                {
                    Voat.Domain.Models.DomainReferenceDetails current = null;
                    while (enumerator.MoveNext())
                    {
                        current = enumerator.Current;
                        <div class="row">
                            <div class="col-md-6">@Html.DisplayFor(x => current)</div>
                            @if (enumerator.MoveNext())
                        {
                            current = enumerator.Current;
                                <div class="col-md-6">@Html.DisplayFor(x => current)</div>
                            }
                        </div>
                    }
                }
                {
                    var phrase = (string)Context.Request.Query["phrase"];
                    if (!String.IsNullOrEmpty(phrase))
                    {
                        Model.RouteData = ViewContext.RouteData.Values;
                        Model.RouteData.Add("phrase", phrase);
                    }
                }
                @Html.DisplayFor(model => Model, "IPaginatedList")
            }
            else
            {
                if (!String.IsNullOrEmpty(Context.Request.Query["phrase"]))
                {
                    <p>We can't find it.</p>
                    if (User.Identity.IsAuthenticated)
                    {
                        var createUrl = domainType == Voat.Domain.Models.DomainType.Subverse ? "/subverses/create" : String.Format("/user/{0}/sets/create", User.Identity.Name);
                        <p>Hmm... Maybe you should <a href="@createUrl">create it</a>!</p>
                    }
                }
            }
        </div>
    </div>
</div>
